from ...utils.colors import *
from ...utils.proceed_prompt import *
from ...utils.math_utils import *

from ...data.actions.list_files import *
from ...data.actions.load_file import *
from ...data.actions.log_out import *
from ...data.actions.remove_file import *
from ...data.actions.store_file import *

from .. import config_manager
from . import file_manager

from importlib.resources import files

def get_file_names(file_list: str) -> list[str]:
    parts = file_list.split(";")

    names = []

    for part in parts:
        names.append(part[:file_manager.MAX_FILE_NAME_LENGTH].replace("_", ""))

    return list(filter(("").__ne__, names))[1:]

def get_file_start_indices(file_list: str) -> list[int]:
    parts = file_list.split(";")

    indices = []

    for part in parts:
        indices.append(part[file_manager.MAX_FILE_NAME_LENGTH:])

    return list(filter(("").__ne__, [(int(i) if i != "" else i) for i in indices]))

def get_num_sent_messages(file_list: str) -> int:
    parts = file_list.split(";")

    return int(parts[0])

def get_num_files(file_list: str) -> int:
    return file_list.count(";") - 1

def get_num_messages_for_file(file_bytes: bytes) -> int:
    max_bytes_per_message = config_manager.program_config["max_bytes_per_message"]

    return ceildiv(len(file_bytes), max_bytes_per_message)

def get_next_file_start_index(file_list : str) -> int:    
    return get_num_sent_messages(file_list) + 1

def get_new_file_list_content(old_content: str, name: str, start_index: int, num_messages: int) -> str:
    first_semicolon_pos = old_content.find(";")

    new_num_messages = int(old_content[:first_semicolon_pos]) + num_messages

    return str(new_num_messages) + old_content[first_semicolon_pos:] + name + str(start_index) + ";"

def get_file_bytes(file_path: str) -> bytes:    
    with open(file_path, 'rb') as file:
        return str(file.read())

def get_file_path() -> str:
    Tk().withdraw()
        
    return askopenfilename()

def file_name_is_valid(name: str) -> bool:
    length = len(name)

    return length >= 1 and length <= file_manager.MAX_FILE_NAME_LENGTH and name.isalnum()

def get_file_name() -> str:
    while True:
        print("\nPlease provide a file name, max 4 characters and only letters and numbers: ", end="")

        name = input()

        if(not file_name_is_valid(name)):
            print(RED + "\nTry again." + RESET)
        else:
            return name + "_" * (file_manager.MAX_FILE_NAME_LENGTH - len(name))
        
def get_formatted_list(file_list: str) -> str:
    names = get_file_names(file_list)
    total_num_messages = get_num_sent_messages(file_list)
    start_indices = get_file_start_indices(file_list) + [total_num_messages + 1]

    formatted_list = ""

    for i in range(len(start_indices) - 1):
        formatted_list += f"{str(i + 1)}: {names[i]} (Number of messages: {start_indices[i + 1] - start_indices[i]})\n"

    return formatted_list